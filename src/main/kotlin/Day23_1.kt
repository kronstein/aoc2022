import java.util.*
import kotlin.math.abs

data class Elf(
    val y: Int,
    val x: Int,
) {

}

data class Proposition(
    val x: Int,
    val y: Int,
    val constraints: List<Constraint>
)

data class Constraint(
    val dy: Int,
    val dx: Int,
)

data class Final(
    val x: Int,
    val y: Int,
)

fun main() {
    var elves = input23.split("\n").mapIndexed { y, s ->
        s.mapIndexedNotNull { x, c ->
            when(c) {
                '#' -> Elf(y = y, x = x)
                else -> null
            }
        }
    }.flatten()

    val check = mutableListOf(
        Proposition(constraints = listOf(Constraint(-1, 0), Constraint(-1, 1), Constraint(-1, -1)), y = -1, x = 0), // N, NE, NW
        Proposition(constraints = listOf(Constraint(1, 0), Constraint(1, 1), Constraint(1, -1)), y = 1, x = 0), // S, SE, SW
        Proposition(constraints = listOf(Constraint(0, -1), Constraint(-1, -1), Constraint(1, -1)), y = 0, x = -1), // W, NW, SW
        Proposition(constraints = listOf(Constraint(0, 1), Constraint(-1, 1), Constraint(1, 1)), y = 0, x = 1), // E, NE, SE
    )

    println("\n== Initial state ==")
    elves.print()

    for(round in 1..10) {
        val propositions = elves.mapNotNull { elf ->
            val adjacent = findAdjacent(elf, elves)
            if (adjacent.isEmpty()) {
                // This elf will not move.
                null
            } else {
                check.firstOrNull { proposition ->
                    proposition.isValid(elf, adjacent)
                }?.let {
                    elf to it
                }
            }
        }

        val targets = propositions.groupBy { (elf, proposition) ->
            Final(elf.x + proposition.x, elf.y + proposition.y)
        }

        val moved = targets.flatMap {
            listOfNotNull(it.value.singleOrNull())
        }

        elves = elves.filter { it !in moved.map { (elf, _) -> elf } } + moved.map { (elf, proposition) -> elf.copy(
            y = elf.y + proposition.y,
            x = elf.x + proposition.x,
        )}

        Collections.rotate(check, -1)

        println("\n== After round #$round ==")
        elves.print()
    }

    println("== Final ==")
    val empty = elves.print()
    println(empty)
}

fun Proposition.isValid(elf: Elf, elves: List<Elf>): Boolean =
    constraints.all { constraint ->
        elves.none { another ->
            another.x == elf.x + constraint.dx && another.y == elf.y + constraint.dy
        }
    }

fun findAdjacent(elf: Elf, elves: List<Elf>) = elves.mapNotNull {
    if (it == elf) {
        null
    } else {
        if (abs(it.x - elf.x) <= 1 && abs(it.y - elf.y) <= 1) {
            it
        } else {
            null
        }
    }
}

fun List<Elf>.print(): Int {
    val lines = groupBy { it.y }
    val top = minOf { it.y }
    val bottom = maxOf { it.y }
    val left = minOf { it.x }
    val right = maxOf { it.x }
    var sum = 0
    for(y in top..bottom) {
        val line = lines[y] ?: listOf()
        for(x in left..right) {
            when {
                line.any { it.x == x && it.y == y } -> print('#')
                else -> print('.').also {
                    sum++
                }
            }
        }
        println()
    }
    return sum
}

val input23 = """
.###..##....#.#...###.###.#.#..#.########.#.###.##....####.#.##....#...##
.#.####.###..####.##..##...#.#....#....#.#..###..###....##.##..###..#.#.#
.#..###..#....##.####.#.#.##.##...######..##......###..#.#....#...#######
#.###..#.....#.#.##.....##.#####..####...##.#.....###..#....#..#.#.#..##.
..###.##..#.##.#######.#####..###....##...#.##..##..##....#.#.#..#####..#
.#.#..#..#..##..####..#....####..##.#..#..##...##.#####..#..#.#..#...##..
#.....#..#.####.#.....#.#....#...#.###.#.####...##.#..##..#.#.###...####.
###...#.#...#...##....##.#...#.....###..##..#....###.#...###.###..###..##
...###.#.#.....###..#.#..#.##....#..##...#.###..####...#.##.....##.###..#
.##.#.....#..#..#.......#..###.....###.##.###..###.##..#..#.###...#...###
...##.##..#.#.##.##.#.#.#...#.##.##.##...##....#.#######..##.#.##.....###
##...........#.....##.#.##.###..#..#.#....##.#...#.#.##.###.#...###.####.
#..##.##.#..##..#...##.##..#...#.##..##..#..#.....#..#.#####.#..##....#..
...#...###.#..##.....##.#..#.##...#.##.###..####.###..#....#.##..###..###
...#.#..########..###.#.####............####.####.##.......#....#.##.#..#
#.#....#...#....#.#..###.#.#..###.#..####...##.######..####...#####..#.#.
#.#..##.......#..#..#....##...#..###..##...#.....####.##.#...#.##.#....##
#.....#.###..#########..###.#..#####.#..###.####.####.#.....#.#...###.##.
#...#..####...######.##.#.##.##.#.#..#.....#..#.##.#.##.#.#...##.#.#...#.
##.#....###...##...##....#..#####.#.##..####.#...####..#..#...#..####.###
#.##.....#.#...#..#....##..##.#####..##....#####.####..#..####....#..##..
.....##..#..####...#####...##..#.#.##.#.##...####....#.####.#.#.....#..##
#.####.###.##.#.#....##.######...#.#.##.###.##.#..####..#..#......#.##...
.###.##.##.###..###.#.#.###.##....##.#.###..#..##...#...#.##.#..#.##.#..#
####.####...#####....###.#####..##..##...####..####.##..###.##..#..#.#..#
#.....##..##.###.#.#.###.###..#..##..##.#.###..#..##.#......#.###.###.##.
####..#.#..#..#.#..#..#.#..#.#..#.##.##..##.##.###...##..#...####.#.###..
###.#....#.#.#.####.#.###.##.#....#..#.#..###.#.#.###.#.######.#....#..##
.####.###.#.##.###...#.##.#.#....#.#..###.##.#...#.....#....##.##..#.#.##
##.#####..#.#..#.#...##..#.#########..##...#..####...#.#...###.####.#...#
###.#...#.#.##.###.....#...##.###...#.#.#.##..##.##.#..####....####...#..
...#.......##.##.#..#.##.....###.##.##.#.#.#.#..##..##..##..###..####..#.
#.#...#..##..##.###...##.....##.#.###.##..######.#.####...##.###...##..#.
.#...#.#####.###.#..#.#...##.#.###.###.####...#...#.#..#...##.#####.#.##.
##.#.##....#..#..#..#....###.######..##.###..#..#.##.##.##.#...##...##.##
#..#..######....##..####..#....####..#.#....#..###...###.###.....#.#..#.#
##....#...###.#####.###.##..###..##.##.#.....###...#.####.#....###..#.##.
##......#..####.#....####.#..#....#.####.#..####.##..###.#..#.#..#.#.#...
.#.#..#........#.#.#####.##.###...#..##....###...###.#.#.#.##......##.###
.##....#.#.#...#.###..###.##.####.#.####.##......##..##.####.##..#####.#.
#.##..#.######..####....#####...#.######..#..#.##.#..##..#..###.....#.###
.....###.##.#.#.#..####....####.######.##.##...#####..#...#...#..##..##.#
.#.#..#...#..######..#..##....#.#..#..##.##.#.#...##.##.#..####.#..##.###
.#.######....#.##.##.#..##......##..##...#.##..#..##.....###..#.#....#.#.
...#...##.####......#.######..##.##.####.#....#.#####.....#.##.#....###..
.....#.##..#..###..#.##...#..#.#.#.#..#####....###.#.##.##..####...###.##
......##.###.#.##..#..#.##.#......#...#.#.#..###.#....###....##.##..###..
.....###...#..###.#.....#.####.....#..###..###..#.#.#.###..#.....##.###..
##.#.###.#.#..#..#....#.##..###.#.#.#...###.###.#.#..#.#.##.#..#.#....#..
.###..##.#...####.#.#####.##..##..######...#...#.#..####..#.##..#.####..#
...###.#...#..#.##.####.#..##.###..#.##..##...##.#####..###.######.#.###.
..#.#....####....##.#.#....###.......#.###.#..#.###..#..#..#......###...#
.#...##..##.#...#....#..#..##.#.####..####........##.#.##.#..##..##.....#
.#..###.#.##.####......###.#......##.#####....######.....#.#####..#.#..#.
##.##.....###.##.#.#....#...##.##...###.##.###.##.###.###..##..#...#.#.#.
.##...##.##....###.###.#####.#.###..##.#...##.##..##.##..#.#.#.#.....#.#.
#.######.#.##.#.##.#...#....##...#####..###...##.###..#...#..###.#.##.#.#
..#...#.##...#.##.####.....#...#.##..#.###.###...#.##.###.#.#.######..#..
#..#....#..#....##.##.#..####..#..###.##.#.#.#.#..#.#......#.####..###.#.
#.###.#####.##.###..######.#..#...#.##......##..##..####.........##.##.#.
....##..##....#.#...###....##.###..#..#..#..#.#..###...#.#.#.##..#...#...
.#####.#####...#..#..###.###..#.#.#.#..####.#...##.#...#..####..##..##.##
#.#.###.#.#..##...###..##.#.##.##..##...##.#..#.#.....#.#.#...#####....##
#.#...##.#####...##.......#..##.......##.##....##...#.##..##..#.###.####.
.###.#.##..#....####.#######..##...#...#.....##..##...##.#..##..#.####.##
.##.##.#..#...#.#.###.####.###..#..#.#..###.#.#.##.#.#..#...#..##.##.##..
..#....##.##...##.#####....##.#..#.##..#.#...###...#.###.#..#.##......#..
....#.#...####....##..#.#..###.#..#....######.##.#.#..##..#####....#####.
#.###...#...#..##...#...#..#####....#..#......#......#.#.###.#..###.##.#.
#.#.#..#.#...#.##.#.#.#....###.###.##...##...###.#....#.#...#.#.#.#...###
###..#.....#.#.##.#....#.....##..#....#.##.###...##..####..#..###.####.##
#######....#...#.####...####.###...#.##.##...#......####.....##..####.#..
..#......##.#..##..#..#..#.#.#.#.#####..##....######.....###..#####.##.#.
""".trimIndent()